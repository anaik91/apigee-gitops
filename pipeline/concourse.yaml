resource_types:
  - name: cron
    type: docker-image
    source:
      repository: cftoolsmiths/cron-resource
      tag: latest

resources:
  - name: apigee-gitops-repo
    type: git
    icon: github
    source:
      uri: https://github.com/anaik91/apigee-gitops.git
      branch: main

  - name: daily-cron-trigger
    type: cron
    icon: clock-outline
    source:
      expression: "0 3 * * *" # Run daily at 3 AM UTC
      location: "UTC"

  - name: apigee-runner-image
    type: docker-image
    icon: docker
    source:
      repository: ((docker-image-repo-name))/apigee-gitops-image
      tag: latest
      username: ((docker-registry-username))
      password: ((docker-registry-password))

# Reusable task configuration
task_run_apigee_script: &task_run_apigee_script_def
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: ((docker-image-repo-name))/apigee-gitops-image
      tag: latest
      username: ((docker-registry-username))
      password: ((docker-registry-password))
  inputs:
    - name: apigee-gitops-repo
  outputs: # Define an output for the status file
    - name: task-status
  params:
    GCP_SA_KEY_JSON_BASE64: ((gcp_service_account_key_base64))
    APIGEE_ORGANIZATION: ((apigee-org))
    APIGEE_ENVIRONMENT: ((apigee-env))
    RESOURCE_TYPE:
    APPLY_CHANGES: "false"
    CONFIG_PATH_IN_REPO: "src"
    GCP_PROJECT_ID_FOR_LOGGING: ((gcp_project_id_for_logging))
    CONCOURSE_BUILD_URL: # Injected by Concourse
    CONCOURSE_JOB_NAME: # Injected by Concourse
    CONCOURSE_BUILD_NAME: # Injected by Concourse
  run:
    path: sh
    args:
      - -ec
      - |
        echo "Starting Apigee GitOps script for resource type: $RESOURCE_TYPE"
        JOB_STATUS="SUCCESS" # Assume success initially

        KEY_FILE_PATH="/tmp/sa-key.json"
        echo "$GCP_SA_KEY_JSON_BASE64" | base64 -d > "$KEY_FILE_PATH"
        chmod 400 "$KEY_FILE_PATH"
        gcloud auth activate-service-account --key-file="$KEY_FILE_PATH" --project="$GCP_PROJECT_ID_FOR_LOGGING"

        SCRIPT_ARGS="--org \"$APIGEE_ORGANIZATION\" --path \"apigee-gitops-repo/$CONFIG_PATH_IN_REPO\" --keyfile \"$KEY_FILE_PATH\" -t \"$RESOURCE_TYPE\" -v"
        if [ -n "$APIGEE_ENVIRONMENT" ]; then
          SCRIPT_ARGS="$SCRIPT_ARGS --env \"$APIGEE_ENVIRONMENT\""
        fi
        if [ "$APPLY_CHANGES" = "true" ]; then
          SCRIPT_ARGS="$SCRIPT_ARGS --ensure-git-state"
          echo "WARNING: --ensure-git-state IS ENABLED. CHANGES WILL BE APPLIED."
        else
          echo "INFO: Running in dry-run mode (--ensure-git-state is OFF)."
        fi

        echo "Executing: python3 /app/apigee_gitops_tool.py $SCRIPT_ARGS"
        # Capture exit code of the python script
        set +e # Disable exit on error temporarily
        python3 /app/apigee_gitops_tool.py $SCRIPT_ARGS
        SCRIPT_EXIT_CODE=$?
        set -e # Re-enable exit on error

        if [ $SCRIPT_EXIT_CODE -ne 0 ]; then
          echo "Python script failed with exit code $SCRIPT_EXIT_CODE"
          JOB_STATUS="FAILURE"
        else
          echo "Python script completed successfully."
        fi

        # --- Notification Stage (Log to Google Cloud Logging) ---
        LOG_NAME="concourse-apigee-gitops-jobs" # Common log name for all jobs
        CONCOURSE_URL="${ATC_EXTERNAL_URL:-unknown-concourse-url}" # Get Concourse URL if available
        BUILD_LINK="$CONCOURSE_URL/teams/$CONCOURSE_TEAM_NAME/pipelines/$CONCOURSE_PIPELINE_NAME/jobs/$CONCOURSE_JOB_NAME/builds/$CONCOURSE_BUILD_NAME"

        # Prepare JSON payload for structured logging
        JSON_PAYLOAD=$(cat <<EOF
        {
          "message": "Concourse job '$CONCOURSE_JOB_NAME' for Apigee resource '$RESOURCE_TYPE' finished with status: $JOB_STATUS.",
          "concourse": {
            "team": "$CONCOURSE_TEAM_NAME",
            "pipeline": "$CONCOURSE_PIPELINE_NAME",
            "job": "$CONCOURSE_JOB_NAME",
            "build_id": "$CONCOURSE_BUILD_ID",
            "build_name": "$CONCOURSE_BUILD_NAME",
            "build_link": "$BUILD_LINK"
          },
          "apigee_org": "$APIGEE_ORGANIZATION",
          "apigee_env": "${APIGEE_ENVIRONMENT:-N/A}",
          "resource_type_processed": "$RESOURCE_TYPE",
          "apply_changes_enabled": "$APPLY_CHANGES",
          "script_exit_code": "$SCRIPT_EXIT_CODE"
        }
        EOF
        )

        echo "Attempting to write log to Google Cloud Logging..."
        gcloud logging write "$LOG_NAME" "$JSON_PAYLOAD" --payload-type=json --project="$GCP_PROJECT_ID_FOR_LOGGING" \
          --severity=$(if [ "$JOB_STATUS" = "SUCCESS" ]; then echo "INFO"; else echo "ERROR"; fi)

        # Clean up
        rm -f "$KEY_FILE_PATH"
        gcloud auth revoke --all 2>/dev/null || true # Revoke SA creds used by gcloud

        echo "Apigee GitOps script and logging finished for resource type: $RESOURCE_TYPE"

        # Write status to an output file for Concourse (optional, but good for chaining)
        echo "$JOB_STATUS" > task-status/status.txt

        # Ensure the task exits with the script's exit code if it failed,
        # or if logging fails and we want to mark the task as failed.
        if [ "$JOB_STATUS" = "FAILURE" ]; then
          exit $SCRIPT_EXIT_CODE # Or exit 1 if you want a generic failure code
        fi

jobs:
  # --- Organization-Scoped Resource Jobs ---
  - name: sync-developers # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-developers
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "developers"
          APPLY_CHANGES: "true"
          # APIGEE_ENVIRONMENT not needed

  - name: sync-apiproducts # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-apiproducts
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "apiproducts"
          APPLY_CHANGES: "true"

  # --- Environment-Scoped Resource Jobs ---
  - name: sync-targetservers # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-targetservers
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "targetservers"
          APPLY_CHANGES: "true"
          APIGEE_ENVIRONMENT: ((apigee-env))

  - name: sync-resourcefiles # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-resourcefiles
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "resourcefiles"
          APPLY_CHANGES: "true"
          APIGEE_ENVIRONMENT: ((apigee-env))

  - name: sync-flowhooks # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-flowhooks
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "flowhooks"
          APPLY_CHANGES: "true"
          APIGEE_ENVIRONMENT: ((apigee-env))

  - name: sync-references # Renamed
    public: true
    plan:
      - get: apigee-gitops-repo
        trigger: true
      - get: daily-cron-trigger
        trigger: true
      - get: apigee-runner-image
        
        trigger: false
      - task: run-sync-references
        config:
          <<: *task_run_apigee_script_def
        params:
          RESOURCE_TYPE: "references"
          APPLY_CHANGES: "true"
          APIGEE_ENVIRONMENT: ((apigee-env))

# groups:
#   - name: org-scoped
#     jobs: [sync-developers, sync-apiproducts]
#   - name: env-scoped
#     jobs: [sync-targetservers, sync-resourcefiles, sync-flowhooks, sync-references]